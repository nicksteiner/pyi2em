name: build-wheels
on:
  push: { tags: ["v*"] }
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-13
            macos_arch: x86_64
            macos_target: "13.0"
          - os: macos-14
            macos_arch: arm64
            macos_target: "14.0"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - run: python -m pip install -U pip cibuildwheel build
      # On Linux, cibuildwheel builds inside a manylinux container; install GSL inside
      # the container using CIBW_BEFORE_ALL_LINUX and export PKG_CONFIG_PATH so CMake
      # can find it via pkg-config. auditwheel will bundle libgsl into the wheel.
      - name: System deps (macOS)
        if: runner.os == 'macOS'
        run: brew update && brew install gsl pkg-config
      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "*-musllinux_*"
          CIBW_ARCHS_MACOS: "${{ matrix.macos_arch || 'auto' }}"
          # Set macOS deployment target to match runner OS/arch to satisfy delocate
          CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=${{ matrix.macos_target || '11.0' }}"
          CIBW_BEFORE_ALL_LINUX: |
            bash -exc '
              curl -L -o /tmp/gsl.tar.gz https://ftp.gnu.org/gnu/gsl/gsl-2.8.tar.gz
              mkdir -p /tmp/gsl && tar -xzf /tmp/gsl.tar.gz -C /tmp/gsl --strip-components=1
              pushd /tmp/gsl
              ./configure --prefix=/opt/gsl
              make -j"$(nproc)"
              make install
              popd
              # Ensure no stray local build artifacts confuse auditwheel
              rm -rf /project/build /project/bld
            '
          CIBW_ENVIRONMENT_LINUX: |
            PKG_CONFIG_PATH=/opt/gsl/lib/pkgconfig
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            LD_LIBRARY_PATH=/opt/gsl/lib auditwheel repair -w {dest_dir} {wheel}
        run: python -m cibuildwheel --output-dir dist
      - name: List built wheels
        run: ls -lah dist
      - name: Smoke test wheel (Linux)
        if: runner.os == 'Linux'
        run: |
          python -m venv /tmp/wenv
          . /tmp/wenv/bin/activate
          python -m pip install -U pip
          PYTAG=$(python -c 'import sys; print(f"cp{sys.version_info[0]}{sys.version_info[1]}")')
          WHEEL=$(ls dist/pyi2em-*${PYTAG}-*manylinux*.whl | head -n1)
          echo "Installing wheel: $WHEEL"
          python -m pip install "$WHEEL"
          python - <<'PY'
          import pyi2em
          print("pyi2em import OK", pyi2em.__version__ if hasattr(pyi2em, "__version__") else "(no __version__)")
          PY
      - name: Verify bundling (macOS)
        if: runner.os == 'macOS'
        run: |
          python -m pip install -U delocate
          python - <<'PY'
          import glob, subprocess, sys
          wheels = glob.glob('dist/*.whl')
          assert wheels, 'No wheels found'
          for w in wheels:
              print('Checking', w)
              # delocate-listdeps -d exits nonzero if external libs are needed
              subprocess.check_call([sys.executable, '-m', 'delocate.cmd.delocate_listdeps', '-d', w])
          PY
      - name: Smoke test wheel (macOS)
        if: runner.os == 'macOS'
        run: |
          python -m venv /tmp/wenv
          . /tmp/wenv/bin/activate
          python -m pip install -U pip
          PYTAG=$(python -c 'import sys; print(f"cp{sys.version_info[0]}{sys.version_info[1]}")')
          WHEEL=$(ls dist/pyi2em-*${PYTAG}-*macosx*.whl | head -n1)
          echo "Installing wheel: $WHEEL"
          python -m pip install "$WHEEL"
          python - <<'PY'
          import pyi2em
          print("pyi2em import OK", pyi2em.__version__ if hasattr(pyi2em, "__version__") else "(no __version__)")
          PY
      - name: Build sdist
        run: python -m build --sdist
      - name: Publish (PyPI Trusted Publisher)
        # Publish only on Linux runners; container actions aren't supported on macOS/Windows
        if: startsWith(github.ref, 'refs/tags/') && runner.os == 'Linux'
        uses: pypa/gh-action-pypi-publish@v1.10.1
        with:
          skip-existing: true
